@model AvlZen.Models.ContactFormModel
@{
    ViewBag.Title = "Contact";
}

<h2>@ViewBag.Title</h2>
@*<h3>@ViewBag.Message</h3>*@

<div class="container-fluid">
    <div class="row">
        <div class="col-md-12 bgTan divBdr">
            <p class="myListHeader">AVL Zen provides a portal to yoga classes available on any given day here in Asheville.</p>
            <p>
                The schedule detail is taken from information already on the web.
                Every attempt is made to make sure that information is displayed accurately,
                but for instructor substitutions, class cancellations, etc.,
                please follow the given links to the studio's web site for scheduling verification.
            </p>
            <p>
                If you see any <strong>errors</strong>, know of any <strong>other studios</strong> with monthly schedules or have <strong> comments or suggestions</strong>,
                please use the form below or email us directly at <a href="mailto:info@avlzen.com">info@avlzen.com</a>
            </p>
        </div>
    </div>
    <div class="row">
        <div class="col-md-3 bgTan divBdr">
            <p class="myListHeader">For questions, suggestions and corrections regarding the AVL Zen site:</p>
            @*<address>*@
                <strong>Contact:</strong> <a href="mailto:info@avlzen.com">info@avlzen.com</a>
                <p>...or use this form:</p>
                @using (Html.BeginForm("Contact", "Home", FormMethod.Post, new { id = "contact-form" }))
                {
                    <fieldset>
                        <p>Name (optional)<br />
                            @Html.TextBoxFor(model => model.Name)
                        </p>
                        <p>Email (optional)<br />
                            @Html.TextBoxFor(model => model.Email)
                        </p>
                        <p>Message (required)<br/>
                        @Html.TextAreaFor(model => model.Message, new { style = "width:100%"})
                        </p>
                        @*<input class="form-button" data-type="reset" value="Clear" />*@
                        <input class="btn bgMaroon whiteText" data-type="submit" type="submit" value="Send" />
                    </fieldset>
                }
            @*</address>*@
        </div>
        <div id="mapWrap" class="col-md-5 bgTan divBdr">
            <div id="map"></div>
        </div>
        <div class="col-md-4 bgTan divBdr">
            @*<div class="myTitle">Yoga Studios</div>*@
            @*<div class="bgTan divBdr">*@
                <p class="myListHeader">For details and last-minute information about studios, follow the links. Use the checkboxes to locate studios on the map:</p>
                @if (Model.PlacesModel != null)
                {
                    foreach (var p in Model.PlacesModel.Places.OrderBy(p => p.Name))
                    {
                            <input type="checkbox" class="mapCB" id="@p.Code" /><label for="@p.Code"> @p.Name</label>
                            <small><a href="@p.Link" target="_blank">@p.Code</a></small>
                        <br/>
                    }

                    <p>@(Model.PlacesModel.Places.Count()) studios.</p>
                }
                else
                {
                    <div>no Model.Classes</div>
                }
            @*</div>*@
        </div>
    </div>
</div>
@section Scripts{
<script src="https://maps.googleapis.com/maps/api/js?sensor=false"></script>
    <script type="text/javascript">
        var geocoder = new google.maps.Geocoder();
        var myLatlng = new google.maps.LatLng(35.5806513, -82.5461539);
        var mapOptions = { zoom: 12, center: myLatlng, mapTypeId: google.maps.MapTypeId.ROADMAP }
        var map = new google.maps.Map($("#map").get(0), mapOptions);

        infoWindow = new google.maps.InfoWindow({
            content: ""
        });
        
        google.maps.event.addDomListener(window, "resize", function () {

            var w = $("#mapWrap").width();
            var h = $("#mapWrap").height();

            var center = map.getCenter();
            google.maps.event.trigger(map, "resize");
            map.setCenter(center);
        });

        function set(value) { // ugh
            return value;
        }
        var jsModel = set(@Html.Raw(Json.Encode(Model.PlacesModel)));
        var studioMap = new Array();
        var infWins = new Array();

        for (var i = 0; i < jsModel.Places.length; ++i) {
            var place = jsModel.Places[i];
            //studioIdx[i] = place.Code;
            //studioTxt[i] = '<div id="content"><h1>' + place.Name + '</h1><p>' + place.Address + '</p></div>';
            studioMap[i] = null;
            infWins[i] = null;
        }
        function find(val) { // Find array element which has a key value of val 
            for (var i = 0; i < jsModel.Places.length; ++i)
                if (jsModel.Places[i].Code == val)
                    return i;
            return null;
        }
        function bindInfoWindow(marker, map, infWin, content) {
            google.maps.event.addListener(marker, 'click', function () {
                infWin.setContent(content);
                infWin.open(map, marker);
            });
        }
        $('.mapCB').click(function () {
            var chk = this.checked;
            var id = $(this).attr('id');
            var idx = find(id);
            var place = jsModel.Places[idx];
            var mappedPt = studioMap[idx];
            if (mappedPt != null)
            {
                if (!chk)
                    mappedPt.setMap(null);
                else
                {
                    mappedPt.setMap(map);
                    map.setCenter(mappedPt.position);
                }
            }
            else
            {
                geocoder.geocode({ address: place.Address }, function (results) {
                    var marker = new google.maps.Marker({
                        position: results[0].geometry.location,
                        map: map,
                        title: place.Name
                    });
                    studioMap[idx] = marker;

                    map.setCenter(marker.position);

                    bindInfoWindow(marker, map, infoWindow, 
                        '<div id="content"><strong>' + place.Name + '</strong><p>' + place.Address + '</p></div>');
                });
                //infWins[idx] = new google.maps.InfoWindow({
                //    content: contentString
                //});
                //var addListener = function (x) {

                //    google.maps.event.addListener(studioMap[x], 'click', function () {
                //        infWins[x].open(map, studioMap[x]);
                //    });
                //}
                //addListener(idx);
                //google.maps.event.addListener(studioMap[id], 'click', 'markerClick(event)' );
                //    function () {
                //    console.dir(this);
                //    console.log(this);
                //    var infowindow = new google.maps.InfoWindow({
                //        content: contentString
                //    });

                //    infowindow.open(map, studioMap[id]);
                //});
            }
        });
    </script>
}
